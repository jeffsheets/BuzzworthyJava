
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Buzzworthy Java
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Buzzworthy Java - Spring Boot and JHipster")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")
    script(type='text/javascript').
      if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      }

  body
    .reveal
      .opi-logo
      //.mutual
      .slides
        section.index-section(data-state="index-slide")
          h1
            i.fa.fa-coffee &nbsp; &nbsp; 
            i.fa.fa-thumbs-up
          h2 Buzzworthy Java - Spring Boot &amp; JHipster
          div Jeff Sheets
          div October 2014

        section
          h1
            i.fa.fa-github
          p These slides are up on GitHub!
          a(href="http://jeffsheets.github.io/BuzzworthyJava/", target="_blank") jeffsheets/BuzzworthyJava
          p Also a printable version | 
           a(href="http://jeffsheets.github.io/BuzzworthyJava/?print-pdf#/", target="_blank") Open Printable PDF

        section
          section
            h2 About Me
            ul
              li Java/Grails/Javascript Consultant for OPI
              li 
               i.fa.fa-twitter &nbsp;
               a(href="https://twitter.com/sheetsj", target="_blank") @sheetsj
              li Website &nbsp;
               a(href="http://sheetsj.com/", target="_blank") http://sheetsj.com/
              li jeffsheets@gmail.com
              
        section
            h2 Objectives Assuming...
            ul
              li Using Eclipse/STS/GGTS or RAD with Ivy
              li We want tools newer than JUnit 3
              li Possibly test with Groovy 
               i.fa.fa-heart
              li Using Stored Procedures
              li Have some Web Service calls
              div &nbsp;
              li Please ask questions!
              span Everyone in this room is an expert!

        section
          section
            h2 Why test your code?
            ul
              li Developers -> Code
              li Senior Developers -> Code and Test
              li Chuck Norris -> continuously deploys to prod with 100% test coverage -- in Assembly &nbsp;
               i.fa.fa-thumbs-up
          
          section
            h2 Really why test?
            ul
              li Obvious (you wouldn&apos;t be in this room otherwise)
              li Molds your testable 
               b coding style
              li Faster than redeploy-test-repeat
              li Coding with 
               b confidence
              li Continuous Deployment &nbsp;
               i.fa.fa-sun-o
          section
            h3 Keep It Simple
            ul
              li Do all of your tests pass?
              li Test Independence
              li Not too brittle
              li Jenkins Server (plus Ivy plus WAM)

        section
          section
            h3 SVN Code Locations
            ul
              li Root /MainRepository/Insurance
              li /EBS/WebServices/trunk/ebs_ECommunicationsWS
              li /EBS/WebServices/branches/WAS85_Branch/
               | hma_PdcrDemographics_WS-JUnitTests
              li /EBS/WebServices/trunk/ebs_CommunicationData_WS-Test
              li Grails /BDS/ServiceWorkTool/trunk/ServiceWorkTool
          section
            h3 Sample App
            ul
              li Simple Domain Model for Car Maintenance
              li
               i.fa.fa-github 
               a(href="https://github.com/jeffsheets/carmaint", target="_blank") https://github.com/jeffsheets/carmaint
              li Generated by 
               a(href="https://github.com/kolorobot/spring-mvc-quickstart-archetype", target="_blank") spring-mvc-quickstart-archetype

        section
          section
            h3 Unit vs Integration vs Functional
            ul
              li unit: JUnit+Mockito or Spock
              li int: Database Transactional and Wiring
              li func: Geb, Selenium, Cloud...
              li Others???
              li How to separate the types?
          section
            h2 Separating Tests (Mutual way)
            ul
              li src/com/mutualofomaha/pkg/MySource.java
              li test/com/mutualofomaha/pkg/MySourceTest.java
              li test/com/mutualofomaha/pkg/MySourceIntTest.java
              li groovytest/com/mutualofomaha/pkg/MySourceSpec.groovy
              li groovytest/com/mutualofomaha/pkg/MySourceIntSpec.groovy
              li Difficult to run only Unit Tests (or Int Tests)
          section
            h2 Ivy Config
            pre.
              <code data-trim contenteditable class="xml">
                &lt;!--  test deps  -->   
                &lt;dependency org="org.junit" name="junit" rev="latest.release"
                            conf="default->default" />   
                &lt;dependency org="org.mockito" name="mockito" rev="latest.release"
                            conf="default->default" /> 
                
                &lt;!--  db2 deps for integration tests --> 
                &lt;dependency org="com.ibm" name="db2" rev="latest.release"
                            conf="default->default" />
              </code>
              

        section
          h2 Traditional JUnit
          div CarRepositoryIT.java
          pre.
            <code data-trim contenteditable>
            //Setup your Eclipse Favorites for code suggestions
            import static org.junit.Assert.assertEquals;
            
            /* ... */
            
            assertEquals(2013, result.getYear().intValue());
            assertEquals("JunitMotors", result.getMake().getName());
            assertEquals(make.getId(), result.getMake().getId());
            assertEquals(car.getDescription(), result.getDescription());
            </code>


        section
          section
            h2 Hamcrest
            div CarRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              import static org.hamcrest.Matchers.equalTo;
              import static org.hamcrest.Matchers.is;
              import static org.junit.Assert.assertThat;
            
              /* ... */
            
              assertThat(result.getYear().intValue(), is(equalTo(2013)));
              assertThat(result.getMake().getName(), is("JunitMotors"));
              assertThat(result.getMake().getId(), is(make.getId()));
              assertThat(result.getDescription(), is(car.getDescription()));
              
              //containsString
              //equalToIgnoringCase
              //hasKey for Maps, hasItem for Collections
              </code>
            
          section
            h2 Hamcrest Details
            ul
              li Readable assertions (actual before expected)
              li
                a(href="https://code.google.com/p/hamcrest/wiki/Tutorial", target="_blank") Hamcrest Docs
                div &nbsp;
              li ProviderRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              assertThat(result, not(nullValue()));
              assertThat(result, hasSize(original.size() + 1));
              
              //This requires overridden provider.equals method
              assertThat(result, hasItem(provider));
              </code>
            
          section
            h2 Custom Matchers
            ul
              li Implement Matcher interface
              span matches() and describeTo() methods
              li Use static methods for 
                b readability
              li CustomMatchers.java and PropertiesIT.java
            pre.
              <code data-trim contenteditable>
              import static com.sheetsj.test.matchers.CustomMatchers.isStringInjected;
              
              /* ... */
              
              assertThat(anotherProperty, isStringInjected());
              </code>
          section
            h2 Testing Thrown Exceptions
            div Use ExpectedException @Rule (UserServiceTest.java)
            pre.
              <code data-trim contenteditable>
              @Rule
              public ExpectedException thrown = ExpectedException.none();

              public void shouldThrowExceptionWhenUserNotFound() {
                thrown.expect(UsernameNotFoundException.class);
                thrown.expectMessage("not found");  //NOTE: does a contains()

                when(accountRepositoryMock.findByEmail("user@example.com"))
                  .thenReturn(null);

                userService.loadUserByUsername("user@example.com");
              }
              </code>


        section
          section
            h2 Mockito Annotations
            ul
              li Experience with Mockito? JMock? Others?
              li Why? To isolate our
               u 
                 b Unit Tests!
              li Mock method return values
              li Verify mock methods were called
              li 
                strong Spy 
                | to mock method on class-under-test
          section
            h2 The Old Mockito Way
            div WorkItemServiceOldMockitoWayTest.java
            pre.
              <code data-trim contenteditable>
              private WorkItemRepository workItemRepo = mock(WorkItemRepository.class);
              private WorkItemService service = new WorkItemService(workItemRepo);

              /* .. inside a test method .. */
              when(workItemRepo.findAll()).thenReturn(allWorkItems);
              </code>
          section
            h2 The New Mockito Way
            div WorkItemServiceTest.java
            pre.
              <code data-trim contenteditable>
              @RunWith(MockitoJUnitRunner.class)
              public class WorkItemServiceTest {
                @Mock
                private WorkItemRepository workItemRepository;

                @InjectMocks
                private WorkItemService service = new WorkItemService();
              }
              </code>
          section
            h2 Sneaky Spies
              .i.fa.fa-meh-o
            ul
              li Spies are a code smell
              li But sometimes it is just easier (legacy)
            pre.
              <code data-trim contenteditable class="java">
              @InjectMocks
              @Spy
              private WorkItemService service = new WorkItemService();

              /* ... in test method ... */
              doReturn(expectedList).when(service)
                   .selectWorkItemsByMakeAndYear("bmw", "2008", allWorkItems);

              Collection&lt;WorkItem> results = service.findAllByMakeAndYear("bmw", "2008");

              //Showing nested matchers in contains and sameInstance
              assertThat(results, contains(sameInstance(expected)));
              </code>
          section
            h2 Mutual of Omaha Example
            small ebs_ECommunicationsWS/test/com/mutualofomaha/ebs/method/RecordFollowupMethodTest.java
            pre.
              <code data-trim contenteditable class="java">
              @RunWith(MockitoJUnitRunner.class) 
              public class RecordFollowupMethodTest { 
                  @Mock 
                  private FollowupService followupService; 

                  @Mock 
                  private CommFollowupReqValidator validator; 

                  @InjectMocks 
                  private RecordFollowupMethod recordFollowupMethod; 

                 //...
              }
              </code>
          section
            h2 Mutual of Omaha Example - cont&apos;d
            pre.
              <code data-trim contenteditable class="java">@Test 
              public void testGo_success() { 
                  CommFollowupReq request = new CommFollowupReq(); 
                  when(followupService.recordFollowup(request)).thenReturn(true); 

                  CommFollowupResp result = recordFollowupMethod.go(request); 

                  verify(followupService).recordFollowup(request); 
                  assertThat(result.getResponseCode(), is(R.ResponseCode.RESPONSE_CODE_SUCCESSFUL)); 
                  assertThat(result.getResponseMessage(), is(R.Notes.SUCCESSFUL_FOLLOWUP_RECORD)); 
              } 

              @Test 
              public void testGo_fail() { 
                  CommFollowupReq request = new CommFollowupReq(); 
                  when(followupService.recordFollowup(request)).thenReturn(false); 

                  CommFollowupResp result = recordFollowupMethod.go(request); 

                  assertThat(result.getResponseCode(), is(R.ResponseCode.RESPONSE_CODE_FATAL_ERROR)); 
                  assertThat(result.getResponseMessage(), is(R.Notes.UNSUCCESSFUL_REQUEST)); 
              }
              </code>


        section
          section
            h2 Integration Tests
            ul
              li Are you testing your ORM/SQL?
              li How about Stored Procedures?
              li Web Service Client calls?
          section
            h2 Transactional Tests
            b Auto-rollback from real database!
            small ebs_ECommunicationsWS/test/com/mutualofomaha/ebs/util/BaseIntegrationTestClass.java 
            pre.
              <code data-trim contenteditable class="java">public abstract class BaseIntegrationTestClass { 
                protected Connection conn = null; 
                protected ModelBuilder modelBuilder = new ModelBuilder(); 

                @Before 
                public void setUp() throws ClassNotFoundException, SQLException { 
                    conn = getConnection(); 
                    conn.setAutoCommit(false); 
                } 

                @After 
                public void tearDown() throws SQLException { 
                    if (conn != null) { 
                        conn.rollback(); 
                        conn.close(); 
                    } 
                } 

                protected Connection getConnection() { /* .... */ } 
              } 
              </code>
          section
            h2 Transactional Tests 2
            div Test now talks to real DB, and rollsback when finished!
            small WorkItemRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              public class WorkItemRepositoryIT extends IntegrationTestBaseClass {
                List&lt;WorkItem> original = workItemRepository.findAll();

                Manufacturer make = manufacturerRepository.save(
                                      new Manufacturer("JUnitMake"));
                Car car = carRepository.save(
                          new Car(2013, make, "JunitModel", "LT FWD 3.6L V6 DOHC 24V"));
                Provider provider = providerRepository.save(
                                      new Provider("Junit Tire Shop", "Shadow Lake"));

                WorkItem workItem = new WorkItem(car, new Date(), "Oil Change", provider, 
                               18123L, 60.12, "Took 1:45 so got free oil change coupon");
                workItem = workItemRepository.save(workItem);

                List&lt;WorkItem> result = workItemRepository.findAll();
              }
              </code>
          section
            h2 Stored Procedure Testing
            div Design code to accept passed in connection object
            small hma_PdcrDemographics_WS-JUnitTests/test/com/mutualofomaha/hma/ pdcrdemographics/dao/ProducerDAOTest.java
            pre.
              <code data-trim contenteditable>public class ProducerDAOTest extends BaseIntegrationTest { 
                private ProducerDAO dao = new ProducerDAO(HmaPdcrDemographicsConstants.DB_SCHEMA); 

                @Test 
                public void testGetProducerUplines() throws Exception { 
                    List<ProducerUplineDTO> result = dao.getProducerUplines(conn, "0666666", 2296, "11/14/2013"); 

                    assertThat(result, hasSize(3)); 
                    assertThat(result.get(0).getProducerNumber(), is("11111")); 
                    assertThat(result.get(0).getProducerType(), is("INDIVIDUAL")); 
                    assertThat(result.get(1).getProducerNumber(), is("22222")); 
                    assertThat(result.get(1).getProducerType(), is("GENERAL AGENT")); 
                    assertThat(result.get(2).getProducerNumber(), is("33333"));
                    assertThat(result.get(2).getProducerType(), is("MARKETER")); 
                } 
              } 
              </code>
          section
            h2 Test Positives and Negatives
            div Not just the Happy Paths
            small ebs_CommunicationData_WS-Test/test/com/mutualofomaha/ebs/ communicationdata/dao/CommunicationDAOTest.java
            pre.
              <code data-trim contenteditable>public class CommunicationDAOTest extends BaseIntegrationTest { 
                @Test 
                public void testFindCode() throws Exception { 
                  String result = CommunicationDAO.findCode(
                                                   conn, "CONTRACTING", "Contract Packet");
                  assertEquals("06", result); 
                } 

                @Test 
                public void testFindCode_mixedCase() throws Exception { 
                  String result = CommunicationDAO.findCode(
                                                   conn, "Contracting", "CONTRACT Packet"); 
                  assertEquals("06", result); 
                } 

                @Test 
                public void testFindCode_notFoundValue() throws Exception { 
                  String result = CommunicationDAO.findCode(
                                                   conn, "CONTRACTING", "Made Up Value"); 
                  assertEquals("", result); 
                } 
              } 
              </code>


        section
          section
            h2 Testing Web Service Clients
            ul
             li Chrome Wizdler (SOAP)
             li Chrome Postman (REST)
             li Avoid brittleness in Int Tests
             li Make life easier with groovy
             li Unit Test for isolation
          section
            h2 WS Integration Test
            div Avoid Brittleness
            div Hard to control data - Can check results not empty
            small ebs_CommunicationData_WS-Test/test/com/mutualofomaha/ebs/communicationdata/service
            pre.
              <code data-trim contenteditable>public class CommunicationData_WSIntegrationTest {
                private CommunicationDataWSDelegate stub; 

                @Before 
                public void setUp() throws MalformedURLException { 
                  URL url = new URL(ITG_PATH + "CommunicationData_WSService?wsdl"); 
                  QName qname = new QName("http://service.communicationdata.ebs.mutualofomaha.com/", "CommunicationData_WSService"); 
                  Service service = Service.create(url, qname); 
                  stub = service.getPort(CommunicationDataWSDelegate.class); 
                } 

                @Test 
                public void testGetProducerDocumentData() throws Exception_Exception { 
                  GetProducerDocumentDataWSRequest request = new GetProducerDocumentDataWSRequest(); 
                  request.setProducerNumber("0202020"); 
                  request.setRequestType("ALLDOCSSID");
                  GetProducerDocumentDataWSResponse response = stub.getProducerDocumentData(request); 

                  //Only make sure we have results without errors
                  assertEquals(", ", response.getFeedbackMessage()); 
                }
              }
              </code>
          section
            h2 EDR WS Integration Test
            div Load a file to EDR - then Read it back!
            small ebs_ECommunicationsWS/test/com/mutualofomaha/ebs/dao/EdrDaoImplTest.java
            pre.
              <code data-trim contenteditable>public class EdrDaoImplTest { 
                @Before
                public void setUp() { //For SSL Communication
                  Security.setProperty("ssl.SocketFactory.provider", "com.ibm.jsse2.SSLSocketFactoryImpl"); 
                  Security.setProperty("ssl.ServerSocketFactory.provider", "com.ibm.jsse2.SSLServerSocketFactoryImpl"); 
                } 
                public void testLoadDocument() throws Exception { 
                  URL pdfResource = EdrDaoImplTest.class.getClassLoader().getResource("testdata/testpdf.pdf"); 
                  File pdfFile = new File(pdfResource.getFile()); 
                  byte[] pdfBytes = FileUtils.readFileToByteArray(pdfFile); 

                  String result = edrDao.loadDocument(category, type, pdfBytes); 
                  assertTrue(StringUtils.isNotBlank(result)); 

                  EdrGetRestletClient edrGetClient = new EdrGetRestletClient("SPA", key); 
                  byte[] responseBytes = edrGetClient.callEdrGetRawBytes(EnvironmentParms.getEnvironmentType()); 
                  Assert.assertTrue(responseBytes.length > 0); 

                  File outputFile = new File("testoutput/testpdf-output.pdf"); 
                  FileUtils.writeByteArrayToFile(outputFile, responseBytes); 
                  Assert.assertTrue(FileUtils.contentEquals(pdfFile, outputFile)); 
                }
              } 
              </code>
          section
            h2 Groovy WS Clients with wsLite
            div AKA No Client Jars Required!
            small ServiceWorkTool/grails-app/services/com/mutualofomaha/ esc/swt/service/FileNetClientService.groovy
            pre.
              <code data-trim contenteditable class="groovy">SOAPResponse findDocuments(String query, String folderName, String maxRows) { 
                send('findDocuments') { 
                  body { 
                    findDocuments(xmlns:BEANS) { 
                      arg0(xmlns:ARGS, userId) 
                      arg1(xmlns:ARGS, password) 
                      arg2(xmlns:ARGS, query) 
                      arg3(xmlns:ARGS, folderName) 
                      arg4(xmlns:ARGS, maxRows) 
                    } 
                  } 
                } 
              } 
              </code>
          section
            h2 Groovy wsLite Unit Testing
            div Save a response and use it to Unit Test!
            small ServiceWorkTool/trunk/ServiceWorkTool/test/unit/com/mutualofomaha/ esc/swt/service/FileNetClientServiceSpec.groovy
            pre.
              <code data-trim contenteditable class="groovy">class FileNetClientServiceSpec extends Specification {
                protected SOAPResponse mockResponse(String filePath) { 
                  String text = this.getClass().getResource(filePath).text 
                  def envelope = new XmlSlurper().parseText(text) 
                  new SOAPResponse(envelope: envelope) 
                } 
  
                void "findDocumentsByPolicy response is handled well"() { 
                  when: 
                  def results = service.findDocumentsByPolicy('999999-11') 
    
                  then: 
                  1 * service.findDocuments(_, '', _) >> mockResponse('findDocumentsResponse.xml') 
    
                  results.size() == 10 
                  results[0].EntryDate == '2012-02-07' 
                  results[0].PolicyNumber == '999999-11' 
                  results[0].DocName == 'SOLO HLTH RIDER' 
                  results[9].EntryDate == '2012-04-05' 
                  results[9].PolicyNumber == '999999-11' 
                  results[9].DocName == 'OUTGOING CORR' 
                } 
              }
              </code>


        section
          section
            h2 Spock Testing Framework
            ul
              li "The Enterprise Ready Specification Framework"
                .i.fa.fa-rocket
              li Yes, Spock is Groovy
              li Great for testing Java code!
              li Spock modules for Guice, Grails, Spring, etc
              li Read the 
               a(href="http://code.google.com/p/spock/wiki/SpockBasics", target="_blank") Intro Docs
              li IANASE (I Am Not A Spock Expert)

        section
          section
            h2 Spock Test Code
            div Basic Layout
            pre.
              <code data-trim contenteditable>
              class WorkItemServiceSpecTest extends Specification {
                def service = new WorkItemService()
                def "getYearAsString works for simple case"() {
                  given: 'a normal date'
                  def date = Date.parse("MM/dd/yyyy", "08/01/2013")

                  when: 'getYearAsString is called'
                  def result = service.getYearAsString(date)

                  then: 'year is correct on result'
                  result == "2013"
                }
              }
              </code>
          section
            h2 Expect: for functional code
            pre.
              <code data-trim contenteditable>
              def "getYearAsString works for simple case using expect block"() {
                given: 'a normal date'
                def date = Date.parse("MM/dd/yyyy", "08/01/2013")

                expect: 'getYearAsString is correct when called'
                service.getYearAsString(date) == "2013"
              }
              </code>
          section
            h2 Spock Mocks Setup
            pre.
              <code data-trim contenteditable>
              class WorkItemServiceSpecTest extends Specification {
                def service = new WorkItemService()
                def workItemRepository = Mock(WorkItemRepository)
                def setup() {
                  service.workItemRepository = workItemRepository
                }
              }
              </code>
          section
            h2 Spock Mocks - Simple
            pre.
              <code data-trim contenteditable>
              def "findAllByMakeAndYear works with mocks"() {
                given: 'a bunch of work items'
                  List&lt;WorkItem> allWorkItems = buildAllWorkItems()

                when: 'findAllByMakeAndYear is called'
                  def results = service.findAllByMakeAndYear('ford', '2013')

                then: 'results are correct'
                  1 * workItemRepository.findAll() >> allWorkItems
                  results.containsAll allWorkItems[2,4]
              }
              </code>
          section
            h2 Spock Mocks - Wildcard _
            pre.
              <code data-trim contenteditable>
              /** not a good pattern. just showing it is possible */
              def "findAllByMakeAndYear with many tests at once"() {
                given: 'a bunch of work items'
                  List&lt;WorkItem> allWorkItems = buildAllWorkItems()
                  _ * workItemRepository.findAll() >> allWorkItems

                expect: 'findAllByMakeAndYear is called and has correct results'
                  service.findAllByMakeAndYear('ford', '2013').containsAll(
                     allWorkItems[2,4])
                  service.findAllByMakeAndYear('ford', '2012').containsAll(
                     allWorkItems[0..1])
                  service.findAllByMakeAndYear('chevy', '2013').empty
                  !service.findAllByMakeAndYear('ford', '2014')
              }
              </code>
          section
            h2 Spock - Multiple when/then
            pre.
              <code data-trim contenteditable>def "findAllByMakeAndYear with many tests at once but multiple blocks"() {
                given: 'a bunch of work items'
                  List<WorkItem> allWorkItems = buildAllWorkItems()

                when: 'findAllByMakeAndYear is called for Ford and 2013'
                  def results = service.findAllByMakeAndYear('ford', '2013')

                then: 'results are correct'
                  1 * workItemRepository.findAll() >> allWorkItems
                  results.containsAll allWorkItems[2,4]

                when: 'findAllByMakeAndYear is called for Ford and 2012'
                  results = service.findAllByMakeAndYear('ford', '2012')

                then: 'results are correct'
                  1 * workItemRepository.findAll() >> allWorkItems
                  results.containsAll allWorkItems[0..1]
              }
              </code>
          section
            h2 Spock @Unroll Magic FTW!
            ul
             li Wow. Killer Feature! &nbsp; &nbsp; 
               .i.fa.fa-magic
             li Parameterized Tests (anyone doing JUnit style?)
            pre.
              <code data-trim contenteditable>
              @Unroll
              def "getYearAsString with #inputDate returns #result"
                                              (String inputDate, String result) {
                expect: 'getYearAsString is correct when called'
                  service.getYearAsString(
                            Date.parse("MM/dd/yyyy", inputDate)) == result

                where:
                  inputDate    | result
                  "01/01/1999" | "1999"
                  "02/01/2000" | "2000"
                  "03/01/199"  | "199"
                  '03/01/2013' | '2013'	
              }
              </code>
          section
            h2 Spock + Hamcrest? &nbsp;
             i.fa.fa-thumbs-down
            div Groovy is usually easier
            pre.
              <code data-trim contenteditable>
              expect: 'findAllByMakeAndYear returns correct results'
                result1.containsAll allWorkItems[2,4]
                result2.containsAll(allWorkItems[0..1])
                result3.empty
                !result4
              </code>
          section
            h2 Spock Miscellaneous
            ul
             li thrown() and notThrown()
             li setup() and cleanup()
             li setupSpec() and cleanupSpec()
             li @Ignore, @IgnoreRest, @Timeout, @FailsWith
             li where: using simple arrays instead of tables
             li 
              a(href="https://code.google.com/p/spock/wiki/SpockBasics", target="_blank") SpockBasics
          section
            h2 Spock vs JUnit+Mockito+Hamcrest
            ul
             li Spock gives you power of Groovy
             li I prefer readability of Spock Specs
             li Opinions? Thoughts? Spock Questions?
                
              
        section
          section
            h2 Conclusion
          section
            h2 References
            ul
              li Mrhaki Blog 
                a(href="http://mrhaki.blogspot.co.uk/2013/05/spocklight-support-for-hamcrest-matchers.html", target="_blank") for Spock
              li JavaCodeGeeks Testing 2013 
                a(href="http://www.javacodegeeks.com/2013/07/testing-web-based-spring-applications-in-2013-part-one.html", target="_blank") Blog Post

          section
            h1
              i.fa.fa-question-circle
            h2 Questions

    script(src="./assets/js/app.js")
