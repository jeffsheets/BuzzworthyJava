
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Buzzworthy Java
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Buzzworthy Java - Spring Boot and JHipster")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")
    script(type='text/javascript').
      if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      }

  body
    .reveal
      .opi-logo
      //.mutual
      .slides
        section.index-section(data-state="index-slide")
          h1
            i.fa.fa-coffee &nbsp; &nbsp; 
            i.fa.fa-thumbs-up
          h2 Buzzworthy Java - Spring Boot &amp; JHipster
          div Jeff Sheets
          div October 2014

        section
          h1
            i.fa.fa-github
          p These slides are up on GitHub!
          a(href="http://jeffsheets.github.io/BuzzworthyJava/", target="_blank") jeffsheets.github.io/BuzzworthyJava
          p Also a printable version | 
           a(href="http://jeffsheets.github.io/BuzzworthyJava/?print-pdf#/", target="_blank") Open Printable PDF
              
        section
            h2 Buzzworthy Objectives
            ul
              li Much Spring Boot
              li So JHipster
              li Code Code Code
              div &nbsp;
              li Please ask questions! Open discussion
              span Everyone in this room is an expert!

        section
          section
            h2 About Me
            ul
              li Java/Grails/Javascript Consultant for OPI
              li 
               i.fa.fa-twitter &nbsp;
               a(href="https://twitter.com/sheetsj", target="_blank") @sheetsj
              li Website &nbsp;
               a(href="http://sheetsj.com/", target="_blank") sheetsj.com
              li jeffsheets@gmail.com
              li Omaha
          section
            h2 Object Partners Inc (OPI)
            ul
              li Java, Groovy, JavaScript, Mobile, Open Source
              li ~100 Senior Consultants
                ul
                  li Minneapolis, Omaha
                  li Chicago, Denver
                  li Average Tenure Over 5 years
              li Founded 1996

        section
          section
            h2 Set the record straight
            ul
              li We learned Java because it was the 'hipster' lang
              li C and COBOL were the old domain
              li Garbage Collection FTW!
          section
            h2 Web Apps?
            ul
              li We wrote Web apps before JSPs
              li Instead of Apache mod_cgi and perl
          section
            h2 Javascript?
            ul
              li We wrote Javascript (DHTML) before it was cool!
              li CSS when it was still awesome
              li AJAX before the blog post calling it AJAX
          section
            h2 Where did it all go wrong?
            ul
              li I mean, we were using vi before Y2K (not emacs of course)
          section
            h2 Java's Image Problem
            ul
              li NodeJS, Ruby, Go, Swift, etc
              li Code Verbosity and Ceremony
              li Too "enterprisey"
              li App Servers
          section
            ul
              li But what about Groovy and Scala?
              li Groovy was Swift before Swift
              li Kotlin (aka Scala the good parts)
          section
            h2 Java's Speed Problem
            ul
              li Not app performance
              ul
                li Java wins that battle (see Netflix)
              li But speed-to-market
              ul
                li Hard to jumpstart
                li XML everywhere
                li App Servers
          section
            h3 Spicing up Java's Image
            ul
              li Spring Boot
                ul
                  li Write an app in a tweet! (so hipster)
                  li Opinionated Spring all wired up
                  li Production-ready by default
                  li No App Server Required - executable Jars
              li JHipster
                ul
                  li Full stack AngularJS + Spring Boot
                  li JS Build Tools
                  li Beautiful Metrics
                  li HotSwapping Classes just works
              li Groovy Ecosystem
                ul
                  li Groovy / Spock / Gradle / gvm / Grails
              li Others - Dropwizard, Akka, Vert.x

        section
          section
            h2 Spring Boot! &nbsp;
             a(href="http://docs.spring.io/spring-boot/docs/1.1.8.RELEASE/reference/htmlsingle/#getting-started-introducing-spring-boot", target="_blank")
              i.fa.fa-rocket
            ul
              li Opinionated Spring all wired up
              li 100% Java Config (no XML!)
              li Executable Jars, embedded web server (or not)
              li Sane Profiles and Properties
              li Easy REST & Microservices
              li Spring Data JPA - dynamic finders (grails style)
              li Production-ready by default
          section
            h2 Boot Install and CLI
            ul
              li gvm install springboot
              li A full tweet-sized 140 character app:
              li spring run GBR.groovy
              pre.
                <code data-trim contenteditable class="groovy">@RestController
                  class GBR {
                      @RequestMapping("/")
                      String gbr() {
                          "Go Big Red!"
                      }
                  }
                </code>
          section
            h2 Jumpstart a Real Boot App
            ul
              li start.spring.io INITIALIZR
               a(href="http://start.spring.io/", target="_blank")
                i.fa.fa-rocket
              li a la carte selection menu
          section
            h2 Embedded Web Container
            ul
              li Just run as a main class in a jar (wut?)
              li Great for cloud deploys. Microservices. Fat Jars.
              li Weblogic, Websphere, Tomcat, JBoss, etc NOT REQUIRED
              li gradle bootRun
              li java -jar appname.jar
              li Or run Main class from IDE
              li Example...
          section
            h2 Or generate a War
            ul
              li gradle war
              li Warning Disclaimer:
              ul
                li Running latest of any Java stack on Websphere/Weblogic
                 | is tricky. Especially Hibernate/JPA.
                li Because classloaders...
                li It can be done
                li Get your Google / Stackoverflow keyword search game right
          section
            h2 Java Config
            ul
              li No XML, all Java Config (unless you like XML)
              pre.
                <code data-trim contenteditable class="java">@Configuration
                  @EnableAutoConfiguration
                  @ComponentScan
                  public class Application {

                      public static void main(String[] args) {
                          SpringApplication.run(Application.class, args);
                      }

                  }
                </code>
          section
            h2 Everything is all wired up
            ul
              li No fiddling with hooking it all together
              li Production-ready out of the box
          section
            h2 Profiles
            ul
              li Important piece of Spring Boot
              li dev/test/prod profiles
              li Available in core Spring too, but Boot leans on them
          section
            h2 Properties
            ul
              li Hierarchical properties
              li application-*.properties, application.properties, System Props, JNDI Var, JVM Arg, ...
          section
            h2 Boot-style Props in raw Spring
            ul
              li Cool to use application-*.properties in non-Boot apps too
              pre.
                <code data-trim contenteditable class="java">properties sample here...
                </code>
          section
            h2 Database Props
            ul
              li Extend it further, to pull props from a database table
              pre.
                <code data-trim contenteditable class="java">properties sample here...
                </code>
          section
            h2 Spring Data JPA
            ul
              li Simple CRUD Repositories
              li Dynamic Finders
              pre.
                <code data-trim contenteditable class="java">sample here...
                </code>
          section
            h2 Spring Data REST
            ul
              li Easy REST Entities
              li HATEOAS enabled
              pre.
                <code data-trim contenteditable class="groovy"> sample
                </code>
          section
            h2 REST Exception Handling
            ul
              li ResponseEntityExceptionHandler @ControllerAdvice
              li Global handling based on Exception types
              li See RestResponseEntityExceptionHandler.java 
               a(href="https://gist.github.com/jeffsheets/8b73620e0912afd95aa0#file-restresponseentityexceptionhandler-java", target="_blank")
                i.fa.fa-external-link
          section
            h2 Spring MVC Tests &nbsp;
             a(href="https://gist.github.com/jeffsheets/ada3de8fe4a536e5351b", target="_blank")
              i.fa.fa-external-link
            pre.
              <code data-trim contenteditable class="groovy">class AccountControllerTest extends Specification {
                def accountController = new AccountController()
             
                MockMvc mockMvc = standaloneSetup(accountController).build()
             
                def "getAccount test hits the URL and parses JSON output"() {
                    when: 'rest account url is hit'
                    def response = mockMvc.perform(get('/rest/account')).andReturn().response
                    def content = new JsonSlurper().parseText(response.contentAsString)
             
                    then: 'securityService correctly returned account in JSON'
                    response.status == OK.value()
             
                    //Can test the whole content string that is returned
                    response.contentAsString == '{"username":"spockUser"}'
             
                    //Or can use the JsonSlurper version to test the JSON as object
                    content.username == 'spockUser'
                }
              }
              </code>
          section
            h2 Much more
            ul
              li JSP/GSP/Thymeleaf
              li Metrics - app-server style
              li No-SQL data stores, if that's your thing
              li Great docs
              li Simple tutorials

        section
          section
            h2 JHipster! &nbsp;
             a(href="http://jhipster.github.io/", target="_blank")
              i.fa.fa-rocket
            ul
              li Opinionated AngularJS + Spring Boot
              li Yeoman, Grunt, Bower, Gradle
              li Websockets with Atmosphere
              li Liquibase jumpstart
              li Thymeleaf
              li Community! The people are awesome

        section
          section
            h2 Conclusion
          section
            h2 Many Many Thanks!
            ul
              li Bootiful Apps talk by Josh Long 
                a(href="http://", target="_blank") Josh Long
              li JHipster Twitter account
                a(href="http://", target="_blank") @jhipster
          section
            h3 Github repos
            ul
              li github.com/jeffsheets

          section
            h1
              i.fa.fa-question-circle
            h2 Questions

    script(src="./assets/js/app.js")
