
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Buzzworthy Java
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Buzzworthy Java - Spring Boot and JHipster")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")
    script(type='text/javascript').
      if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      }

  body
    .reveal
      .boot-logo
      .opi-logo
      .jhipster-logo
      .slides
        section.index-section(data-state="index-slide")
          h1
            i.fa.fa-coffee &nbsp; &nbsp; 
            i.fa.fa-thumbs-up
          h2 Buzzworthy Java - Spring Boot &amp; JHipster
          div Jeff Sheets
          div October 2014

        section.github-section(data-state="github-slide")
          h1
            i.fa.fa-github
          p These slides are up on GitHub
          a(href="http://jeffsheets.github.io/BuzzworthyJava/", target="_blank") jeffsheets.github.io/BuzzworthyJava
          p Also a printable version | 
           a(href="http://jeffsheets.github.io/BuzzworthyJava/?print-pdf#/", target="_blank") Open Printable PDF

        section.image-section(data-state="image-slide")
          img(src="assets/img/spring-boot-icon-large.png").boot
          div
            small http://projects.spring.io/spring-boot/

        section
          section.image-section(data-state="image-slide")
            img(src="assets/img/hipster-logo.png").hipster
            div
              small http://jhipster.github.io/
            div
              small https://twitter.com/java_hipster/status/522857424181809152
          section.image-section(data-state="image-slide")
            h2 Happy Birthday
            img(src="assets/img/jhipster-birthday.png")
            div
              small 
               a(href="https://github.com/jhipster/generator-jhipster/commit/c8630ab7af7b6a99db880b3b0e2403806b7d2436" target="_blank") Github first commit 
                i.fa.fa-external-link
              
        section
            h2 Buzzworthy Objectives
            ul
              li An introduction to both Boot and JHipster
              li Sample Code
              li Pragmatic Usage Ideas
              div &nbsp;
              li Please ask questions! Open discussion
              span Everyone in this room is an expert!

        section.opi-section(data-state="opi-slide")
          section
            h2 About Me
            ul
              li Java/Grails/Javascript Consultant for OPI
              li 
               i.fa.fa-twitter &nbsp;
               a(href="https://twitter.com/sheetsj", target="_blank") @sheetsj
              li Website &nbsp;
               a(href="http://sheetsj.com/", target="_blank") sheetsj.com
              li jeffsheets@gmail.com
              li Omaha
          section
            h2 Object Partners Inc (OPI)
            ul
              li Java, Groovy, JavaScript, Mobile, Open Source
              li ~100 Senior Consultants
                ul
                  li Minneapolis, Omaha
                  li Chicago, Denver
                  li Average Tenure Over 5 years
              li Founded 1996

        section
          section
            h2 Set the record straight
            ul
              li We learned Java because it was the 'hipster' lang
              li C and COBOL were the old domain
              li Garbage Collection and Object Oriented FTW!
          section
            h2 Web Apps?
            ul
              li We wrote Web apps before JSPs on Netscape
              li Instead of Apache mod_cgi and perl
          section
            h2 Javascript?
            ul
              li We wrote Javascript (DHTML) before it was cool!
              li CSS when it wasn't LESS or SASS
              li AJAX before the blog post calling it AJAX 
               a(href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/", target="_blank") 
                i.fa.fa-external-link
          section
            h2 Where did it all go wrong?
            img(src="assets/img/hipster-vinyl.jpg").sixty
            div
              small http://www.buzzfeed.com/awesomer/the-most-hipster-things-that-have-ever-happened
          section
            h2 Java's Image Problem
            ul
              li NodeJS, Ruby, Go, Swift, etc
              li Code Verbosity and Ceremony
              li Too "enterprisey"
              li App Servers
          section
            h2 JVM Languages Help
            ul
              li Groovy and Scala and JRuby, etc...
              li Groovy was Swift before Swift
              li Kotlin (aka Scala the good parts)
          section
            h2 Java's Speed Problem
            ul
              li Not app performance
              ul
                li Java wins that battle (see Netflix)
                li "Velocity on the JVM is the Killer App" - Andy Glover
              li But speed-to-market
              ul
                li Hard to jumpstart
                li XML everywhere
                li App Servers
          section
            h3 Spicing up Java's Image
            ul
              li Spring Boot
                ul
                  li Write an app in a tweet! (so hipster)
                  li Opinionated Spring all wired up
                  li Production-ready by default
                  li No App Server Required - executable Jars
              li JHipster
                ul
                  li Full stack AngularJS + Spring Boot
                  li JS Build Tools
                  li Beautiful Metrics
                  li HotSwapping Classes just works
              li Groovy Ecosystem
                ul
                  li Groovy / Spock / Gradle / gvm / Grails
              li Others - Dropwizard, Akka, Vert.x
          section.image-section(data-state="image-slide")
            img(src="assets/img/hipster-bow-tie.jpg")
            div
              small http://jhipster.github.io/

        section
          section
            h2 Spring Boot! &nbsp;
             a(href="http://docs.spring.io/spring-boot/docs/1.1.8.RELEASE/reference/htmlsingle/#getting-started-introducing-spring-boot", target="_blank")
              i.fa.fa-external-link
            ul
              li Opinionated Spring all wired up
              li 100% Java Config (no XML!)
              li Executable Jars, embedded web server (or not)
              li Sane Profiles and Properties
              li Easy REST & Microservices
              li Spring Data JPA - dynamic finders (grails style)
              li Production-ready by default
          section
            h2 Boot Install and CLI
            ul
              li gvm install springboot
              li A full tweet-sized 140 character app:
              li spring run GBR.groovy
              pre.
                <code data-trim contenteditable class="groovy">@RestController
                  class GBR {
                      @RequestMapping("/")
                      String gbr() {
                          "Go Big Red!"
                      }
                  }
                </code>
          section
            h2 Jumpstart a Real Boot App
            ul
              li start.spring.io INITIALIZR
               a(href="http://start.spring.io/", target="_blank")
                i.fa.fa-rocket
              li a la carte selection menu
          section
            h2 Embedded Web Container
            ul
              li Just run as a main class in a jar (wut?)
              li Great for cloud deploys. Microservices. Fat Jars.
              li Weblogic, Websphere, Tomcat, JBoss, etc NOT REQUIRED
              li gradle bootRun
              li java -jar appname.jar
              li Or run Main class from IDE
              li Example...
          section
            h2 Or generate a War
            ul
              li gradle war
              li Warning Disclaimer:
              ul
                li Running latest of any Java stack on Websphere/Weblogic
                 | is tricky. Especially Hibernate/JPA.
                li Because classloaders...
                li It can be done
                li Get your Google / Stackoverflow keyword search game right
          section
            h2 Java Config
            ul
              li No XML, all Java Config (unless you like XML)
              pre.
                <code data-trim contenteditable class="java">@Configuration
                  @EnableAutoConfiguration
                  @ComponentScan
                  public class Application {

                      public static void main(String[] args) {
                          SpringApplication.run(Application.class, args);
                      }

                  }
                </code>
          section
            h2 Everything is all wired up
            ul
              li No fiddling with hooking it all together
              li Production-ready out of the box
          section
            h2 Profiles
            ul
              li Important piece of Spring Boot
              li dev/test/prod profiles
              li Available in core Spring too, but Boot leans on them
          section
            h2 Properties
            ul
              li Hierarchical properties
              li application-*.properties, application.properties, System Props, JNDI Var, JVM Arg, ...
          section
            h2 Boot-style Props in raw Spring
            ul
              li Cool to use application-*.properties in non-Boot apps too
              pre.
                <code data-trim contenteditable class="java">properties sample here...
                </code>
          section
            h2 Database Props
            ul
              li Extend it further, to pull props from a database table
              pre.
                <code data-trim contenteditable class="java">properties sample here...
                </code>
          section
            h2 Spring Data JPA
            ul
              li Simple CRUD Repositories
              li Dynamic Finders
              pre.
                <code data-trim contenteditable class="java">sample here...
                </code>
          section
            h2 Spring Data REST
            ul
              li Easy REST Entities
              li HATEOAS enabled
              pre.
                <code data-trim contenteditable class="groovy"> sample
                </code>
          section
            h2 REST Exception Handling
            ul
              li ResponseEntityExceptionHandler @ControllerAdvice
              li Global handling based on Exception types
              li See RestResponseEntityExceptionHandler.java 
               a(href="https://gist.github.com/jeffsheets/8b73620e0912afd95aa0#file-restresponseentityexceptionhandler-java", target="_blank")
                i.fa.fa-external-link
          section
            h2 Spring MVC Tests &nbsp;
             a(href="https://gist.github.com/jeffsheets/ada3de8fe4a536e5351b", target="_blank")
              i.fa.fa-external-link
            pre.
              <code data-trim contenteditable class="groovy">class AccountControllerTest extends Specification {
                def accountController = new AccountController()
             
                MockMvc mockMvc = standaloneSetup(accountController).build()
             
                def "getAccount test hits the URL and parses JSON output"() {
                    when: 'rest account url is hit'
                    def response = mockMvc.perform(get('/rest/account')).andReturn().response
                    def content = new JsonSlurper().parseText(response.contentAsString)
             
                    then: 'securityService correctly returned account in JSON'
                    response.status == OK.value()
             
                    //Can test the whole content string that is returned
                    response.contentAsString == '{"username":"spockUser"}'
             
                    //Or can use the JsonSlurper version to test the JSON as object
                    content.username == 'spockUser'
                }
              }
              </code>
          section
            h2 Much more
            ul
              li JSP/GSP/Thymeleaf
              li Metrics - app-server style
              li No-SQL data stores, if that's your thing
              li Great docs
              li Simple tutorials
          section
            h2 Boot bridges old and new Java worlds
            img(src="assets/img/hipster-bike.jpg").sixty
            div
              small http://www.buzzfeed.com/awesomer/the-most-hipster-things-that-have-ever-happened

        section
          section
            h2 JHipster! &nbsp;
             a(href="http://jhipster.github.io/", target="_blank")
              i.fa.fa-external-link
            ul
              li Opinionated AngularJS + Spring Boot
              li Yeoman, Grunt, Bower, Gradle
              li Karma Client-side tests
              li JHipster-loaded HotSwapping
              li Liquibase jumpstart
              li Thymeleaf, Hazelcast, Logback, HikariCP
              li Websockets with Atmosphere
          section
            h2 Community &amp; Branding
            ul
              li It starts with an image
              li Plus, the developers are amazing people
              li The project is fun and positive
              li Julien Dubois @juliendubois
              li Jérôme Mirc @JeromeMirc
          section
            h2 Code Generation?
            ul
              li Yeoman generates a jumpstarted app
              li Also Grails-like entity generators
              li Personally, I use it to build up an app structure
              li At a minimum, generate an app and borrow ideas into your own
              li Can 'update' from JHipster updates, but YMMV
              li vs Maven Archetypes
          section
            h2 Slides!
            ul
              li So cool they provide their own slides
              li and they're much cooler than mine
              li so I borrowed the next few slides from them
              li
               a(href="http://jhipster.github.io/presentation/#/", target="_blank") Launch 
                i.fa.fa-external-link
          section
            h2 JHipster Goals
            ul
              li A beautiful front-end
              li Latest HTML5/CSS3/JavaScript frameworks
              li Latest Java/Caching/Data access technologies
              li With security and performance in mind
              li And great developer tooling
          section
            h2 High Level
            ul
              li
               a(href="http://jhipster.github.io/presentation/#/3", target="_blank") Client-side 
                i.fa.fa-external-link
              li
               a(href="http://jhipster.github.io/presentation/#/4", target="_blank") Server-side 
                i.fa.fa-external-link
          section
            h2 Code Walk-thru
          section
            h2 Generate App
            a(href="http://jhipster.github.io/presentation/#/6", target="_blank") Steps
             i.fa.fa-external-link
          section
            h2 Entity Generators
            div Demo create entities
            pre.
              <code data-trim contenteditable>yo jhipster docoolstuff
              </code>
          section
            h2 JHipster-loaded
            ul
              li Hot Swap almost any class
              li Stop bouncing your app server
              li Like JRebel but free! (as in speech AND beer)
              li Extension on Spring-loaded (used by Grails)
          section
            h2 Dev and Prod profiles
            ul
              li Dev by default
              li Compile or run with -Pprod to use Prod mode
          section
            h2 Extras
            ul
              li Liquibase
              li Metrics screen
              li GZipping and HTTP Caching Headers
              li Thymeleaf
              li ehcache and hazelcast
              li Docker container
              li Heroku and Openshift deploments
              
        section
          section
            h2 Conclusion
          section
            h2 All good? What's not to like?
            ul
              li Bloat - Downloads the whole internet
              li Memory footprint is tough for free cloud deploys
              li Container support is beta
              ul
                li I had trouble with Websphere 8.5.5
          section
            h2 What about my legacy app?
            ul
              li Pull in pieces today
              li Look at github for Spring Boot
              li Generate a JHipster app and look around
              li Use Spring Profiles now!
              li Java Config!
              li Sometimes feels like building Grails from scratch, but you'll get there!
          section
            h2 Many Many Thanks!
            ul
              li Bootiful Apps talk by Josh Long 
                a(href="https://www.youtube.com/watch?v=T7kLMrqNI9k", target="_blank") 
                 i.fa.fa-external-link
              li Exploring Microframeworks by Dan Woods 
               a(href="http://www.infoq.com/articles/microframeworks1-spring-boot", target="_blank")
                i.fa.fa-external-link
              li JHipster Twitter account 
                a(href="https://twitter.com/java_hipster", target="_blank") @java_hipster
          section.image-section(data-state="image-slide")
            h3 Questions &nbsp;
             i.fa.fa-question-circle
            img(src="assets/img/hipster-final-boss.jpg").boss
            div
              small https://twitter.com/Rokshimmer/status/514106534956388352

    script(src="./assets/js/app.js")
